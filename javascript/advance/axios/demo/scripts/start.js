'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
  throw err;
});

// Ensure environment variables are read.
require('../config/env');

const fs = require('fs');
const chalk = require('chalk');
const webpack = require('webpack');
// const WebpackDevServer = require('webpack-dev-server');
const WebpackDevServer = require('./webpack-dev-server/lib/Server');
const clearConsole = require('./react-dev-utils/clearConsole');
const checkRequiredFiles = require('./react-dev-utils/checkRequiredFiles');
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls
} = require('./react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('./react-dev-utils/openBrowser');
const paths = require('../config/paths');
let config = require('../config/webpack.config.dev');
const createDevServerConfig = require('../config/webpackDevServer.config');

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
// 先判断是否存在必须的文件
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
  // 退出进程
  process.exit(1);
}

// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

if (process.env.HOST) {
  console.log(
    chalk.cyan(
      `Attempting to bind to HOST environment variable: ${chalk.yellow(
        chalk.bold(process.env.HOST)
      )}`
    )
  );
  console.log(
    `If this was unintentional, check that you haven't mistakenly set it in your shell.`
  );
  console.log(`Learn more here: ${chalk.yellow('http://bit.ly/2mwWSwH')}`);
  console.log();
}

// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `choosePort()` Promise resolves to the next free port.
// 获取可用的端口号
choosePort(HOST, DEFAULT_PORT)
  .then(port => {
    if (port == null) {
      // We have not found a port.
      return;
    }
    const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
    const appName = require(paths.appPackageJson).name;
    // 准备url
    /**
     * {
     *  lanUrlForConfig:"10.22.168.157"
        lanUrlForTerminal:"http://10.22.168.157:[1m3000[22m/"
        localUrlForBrowser:"http://localhost:3000/"
        localUrlForTerminal:"http://localhost:[1m3000[22m/"
     * }
     */
    const urls = prepareUrls(protocol, HOST, port);
    // Create a webpack compiler that is configured with custom messages.
    let compiler = createCompiler(webpack, config, appName, urls, useYarn);
    // Load proxy config
    /**
     *   "proxy": {
            "/api": {
              "target": "http://localhost:8080", 
              "changeOrigin": true,
              "pathRewrite" : {
                "^/api" : ""
            }
            }
          }
     */
    const proxySetting = require(paths.appPackageJson).proxy;
    // 将对象转换成数组， 并且给添加新的方法，如： onError， onProxyReq
    const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
    // Serve webpack assets generated by the compiler over a web sever.
    // createDevServerConfig 就是webpackDevServer.js 中暴露出来的方法
    const serverConfig = createDevServerConfig(
      proxyConfig,
      urls.lanUrlForConfig
    );
    // devserver 是一个Express 的服务
    const devServer = new WebpackDevServer(compiler, serverConfig);
    // Launch WebpackDevServer.
    const listenHandler = isOpenBrowser => err => {
      if (err) {
        return console.log(err);
      }
      if (isInteractive) {
        clearConsole();
      }
      console.log(chalk.cyan('Starting the development server...\n'));
      isOpenBrowser && openBrowser(urls.localUrlForBrowser);
    }
    devServer.listen(port, HOST, listenHandler(true));

    ['SIGINT', 'SIGTERM'].forEach(function(sig) {
      process.on(sig, function() {
        devServer.close();
        process.exit();
      });
    });
    // devServer._watch(paths.config)
    fs.watchFile(paths.configDev, () => {
      console.log('===============================')
      devServer.close();
      config = require('../config/webpack.config.dev'); // 需要动态引入文件， 因为修改了文件， 但是加载的配置，还是之前的配置
      // console.log(config.plugins[1])
      compiler = createCompiler(webpack, config, appName, urls, useYarn);
      devServer.listen(port, HOST, listenHandler(false));
    })
  })
  .catch(err => {
    if (err && err.message) {
      console.log(err.message);
    }
    process.exit(1);
  });
